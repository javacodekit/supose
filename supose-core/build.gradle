apply plugin: 'java'

antlrSource = "src/main/antlr"  
antlrOutput = "$buildDir/generated-sources/antlr"  
  
configurations {  
  antlr3  
}   
  
sourceSets.main.java.srcDir antlrOutput  
  
dependencies {  
  compile project(':supose-core')  
    
  // Transitive will bring in the unwanted string template library as well  
  compile "org.antlr:antlr-runtime:3.3",

  // Antlr3 tool path used with the antlr3 task  
  antlr3 "org.antlr:antlr:3.3"  
}  
  
// This may spin out as a plugin once we've got the details down pat  
  
task generateGrammarSource {  
  description = "Generates Java sources from Antlr3 grammars."  
  inputs.dir file(antlrSource)  
  outputs.dir file(antlrOutput)  
} << {  
  mkdir(antlrOutput)  
    
  // Might have a problem here if the current directory has a space in its name  
    
  def grammars = fileTree(antlrSource).include("**/*.g")  
      
  ant.java(classname: 'org.antlr.Tool', fork: true, classpath: "${configurations.antlr3.asPath}") {  
     arg(line: "-o ${antlrOutput}/org/apache/tapestry5/internal/antlr")  
     arg(line: grammars.files.join(" "))  
  }  
}  
  
compileJava.dependsOn generateGrammarSource 

dependencies {
    compile group: 'org.tmatesoft.svnkit', name: 'svnkit', version: '1.3.1'
    compile group: 'log4j', name: 'log4j', version: '1.2.12'
    compile group: 'org.apache.tika', name: 'tika-core', version: '1.0'
    compile group: 'org.apache.lucene', name: 'lucene-core', version: '2.4.0'
 //   testCompile group: 'junit', name: 'junit', version: '4.+'
}


